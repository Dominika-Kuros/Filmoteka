{"mappings":"6gBAKA,MAAMA,EAAWC,KAAKC,MAAMC,aAAaC,QAAQ,UAC3CC,EAAaJ,KAAKC,MAAMC,aAAaC,QAAQ,YAE7CE,EAAcC,SAASC,cAAc,cACrCC,EAAgBF,SAASC,cAAc,gBAsB7C,SAASE,EAAcC,EAAQC,EAAY,GACzC,MAAMC,EAAkBN,SAASC,cAAc,oBAC/CK,EAAgBC,UAAY,GAC5BH,EAAOI,SAAQC,MAAMC,IACnB,MACMC,SAXVF,eAAyBG,GACvB,MAAMC,QAAiBC,MAAM,sCAAqBF,8CAElD,aADmBC,EAASE,QAChBC,MACd,CAMyBC,CAAUP,EAAMQ,KACXC,KAAIC,GAASA,EAAMC,OAGvCC,GADJX,EAAWY,OAASlB,EAAYM,EAAWa,MAAM,EAAGnB,GAAWoB,OAAO,CAAC,UAAYd,GACnDe,KAAK,MAEjCC,EAAY,wBACDjB,EAAMQ,2IAEjBR,EAAMkB,qBACElB,EAAMmB,kFACiBnB,EAAMmB,iGAEFP,sDAA8DZ,EAAMoB,aAAaN,MACxH,EACA,WAGFlB,EAAgByB,mBAAmB,YAAaJ,EAAA,IAElDrB,EAAgB0B,iBAAiB,SAASC,IACA,OAApCA,EAAEC,OAAOC,QAAQ,iBAGrBC,aACAC,YACAC,EAAeL,EAAEC,OAAOC,QAAQ,eAAeI,QAAQrB,IAAIsB,MAAK9B,IAC9D+B,YAAY/B,GACZgC,cAAA,IACF,GAEJ,CApDA3C,EAAYiC,iBAAiB,SAASvB,UACpC,IAAIkC,QAAoBC,EAAKnD,GAC7BU,EAAcwC,IACd,EAAAE,EAAAC,kBAAiBH,EAAa,cAEhCzC,EAAc8B,iBAAiB,SAASvB,UACtC,IAAIsC,QAAsBH,EAAK9C,GAC/BK,EAAc4C,IACd,EAAAF,EAAAC,kBAAiBC,EAAe,cA8ClC,MAAMT,EAAiB7B,MAAMuC,IAC3B,IACE,MAAMnC,QAAiBC,MACrB,sCAAsCkC,6DAGxC,aADoBnC,EAASE,MAI/B,CAFE,MAAOkC,GACPC,QAAQC,IAAIF,EACd,GAEFxC,eAAemC,EAAKQ,GAOlB,aANyBC,QAAQC,IAC/BF,EAAIjC,KAAIV,MAAMG,SACY0B,EAAe1B,KAK7C","sources":["src/library.js"],"sourcesContent":["import './sass/main.scss';\nimport './js/modal-devs';\nimport './js/pagination';\nimport { createPagination } from './js/pagination';\n\nconst queueIds = JSON.parse(localStorage.getItem('queue'));\nconst watchedIds = JSON.parse(localStorage.getItem('watched'));\n\nconst queueButton = document.querySelector('#queue-btn');\nconst watchedButton = document.querySelector('#watched-btn');\n\nconst API_KEY = '3453ae595a5d53cbc877c6d05de8a002';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nqueueButton.addEventListener('click', async () => {\n  let queueMovies = await save(queueIds);\n  displayMovies(queueMovies);\n  createPagination(queueMovies, 'library');\n});\nwatchedButton.addEventListener('click', async () => {\n  let watchedMovies = await save(watchedIds);\n  displayMovies(watchedMovies);\n  createPagination(watchedMovies, 'library');\n});\n\nasync function getGenres(movieId) {\n  const response = await fetch(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\n  const data = await response.json();\n  return data.genres;\n}\n\nfunction displayMovies(movies, maxGenres = 2) {\n  const moviesContainer = document.querySelector('#library-gallery');\n  moviesContainer.innerHTML = '';\n  movies.forEach(async movie => {\n    const genres = await getGenres(movie.id);\n    const genreNames = genres.map(genre => genre.name);\n    const displayedGenres =\n      genreNames.length > maxGenres ? genreNames.slice(0, maxGenres).concat(['other']) : genreNames;\n    const genreText = displayedGenres.join(', ');\n\n    const movieCard = `\n      <div data-id=${movie.id} class=\"movie-card\">\n        <div class=\"movie-card__placeholder\"><img class=\"movie-card__image\" src=\"https://image.tmdb.org/t/p/w500${\n          movie.poster_path\n        }\" alt=\"${movie.title}\" width=\"395\" height=\"574\"></div>\n        <h2 class=\"movie-card__tittle\">${movie.title}</h2>\n        <p class=\"movie-card__info\"> \n        <span class=\"movie-card__overview\">${genreText}</span> | <span class=\"movie-card__realease-date\">${movie.release_date.slice(\n      0,\n      4,\n    )}\n    `;\n    moviesContainer.insertAdjacentHTML('beforeend', movieCard);\n  });\n  moviesContainer.addEventListener('click', e => {\n    if (e.target.closest('.movie-card') === null) {\n      return;\n    }\n    showLoader();\n    showModal();\n    fetchMovieById(e.target.closest('.movie-card').dataset.id).then(movie => {\n      renderModal(movie);\n      removeLoader();\n    });\n  });\n}\n\nconst fetchMovieById = async movie_id => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movie_id}?api_key=964358699754c21d74c014b561cf196c&language=en-US`,\n    );\n    const movie = await response.json();\n    return movie;\n  } catch (error) {\n    console.log(error);\n  }\n};\nasync function save(tab) {\n  const moviesData = await Promise.all(\n    tab.map(async movieId => {\n      const movieData = await fetchMovieById(movieId);\n      return movieData;\n    }),\n  );\n  return moviesData;\n}\n//\n"],"names":["$9a8afeea60b9dfd3$var$queueIds","JSON","parse","localStorage","getItem","$9a8afeea60b9dfd3$var$watchedIds","$9a8afeea60b9dfd3$var$queueButton","document","querySelector","$9a8afeea60b9dfd3$var$watchedButton","$9a8afeea60b9dfd3$var$displayMovies","movies","maxGenres","moviesContainer","innerHTML","forEach","async","movie","genreNames","movieId","response","fetch","json","genres","$9a8afeea60b9dfd3$var$getGenres","id","map","genre","name","genreText","length","slice","concat","join","movieCard","poster_path","title","release_date","insertAdjacentHTML","addEventListener","e","target","closest","showLoader","showModal","$9a8afeea60b9dfd3$var$fetchMovieById","dataset","then","renderModal","removeLoader","queueMovies","$9a8afeea60b9dfd3$var$save","$g1uI7","createPagination","watchedMovies","movie_id","error","console","log","tab","Promise","all"],"version":3,"file":"library.e3debdad.js.map"}